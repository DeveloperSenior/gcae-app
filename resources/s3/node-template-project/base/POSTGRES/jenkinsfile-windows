pipeline{
    agent any

    environment{
        ENV = 'dllo'
        AWS_CREDENTIAL = credentials('aws-credential-dllo')
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '<<YOUR_AWS_ACCOUNT_ID>>'
        ECS_TASK_VERSION = '1'
        DEPLOY_BRANCH = 'develop'
        
    }

    stages{
        stage('Continuous Integration') {
          tools {
            nodejs 'node_20'
          }
          stages {
            stage('Checkout repository GIT'){
                steps{
                    //checkout scm
                    git credentialsId: 'CredencialesGitHub',
                    url: '@urlRepository@',
                    branch: env.DEPLOY_BRANCH
                }
            }

            stage('Install Dependencies NPM'){
                steps{
                  bat 'npm install'
                }
            }

            stage('Run Test'){
                steps{
                    bat 'npm test'
                }
                post{
                    always{
                        junit '**/build/report/tests/junit.xml'
                    }
                }                
            }

            stage('Build Image DOCKER'){
                steps{
                    bat 'docker build -f ./Dockerfile --build-arg ENV=$ENV -t @appname@-app:latest .'
                }               
            }           

          }
        }
        stage('Approval') {
            input {
                message "Do you want to approve the deployment?"
                submitter "afescobar" // Jenkins User ID
                parameters {
                    string(name: 'Approval', description: 'Please review the deployment', defaultValue: '')
                }
            }
            steps {
                echo "${Approval}, Approval"
            }
        }
        stage('Continuous Delivery') {
            
            
           /* tools {
              dockerTool 'docker'
            }*/
           stages {

            stage('Login repository AWS') {
                steps{
                 bat 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin %AWS_ACCOUNT_ID%.dkr.ecr.us-east-1.amazonaws.com'
                }
            }

           stage('Tag Image Version ECR AWS') {
                steps{
                    bat 'docker tag @appname@-app:latest %AWS_ACCOUNT_ID%.dkr.ecr.us-east-1.amazonaws.com/@appname@-apiservices-%ENV%:latest'
                }               
            }
            stage('Push Tag Image ECR AWS') {
                steps{
                    bat 'docker push %AWS_ACCOUNT_ID%.dkr.ecr.us-east-1.amazonaws.com/@appname@-apiservices-%ENV%:latest'
                }               
            }
            stage('Deploy version') {
                steps{
                    bat 'aws ecs update-service --region us-east-1 --cluster @appname@-app-cluster-%ENV% --service cc-@appname@-app-service-%ENV% --task-definition @appname@-app-task-%ENV%:%ECS_TASK_VERSION% --force-new-deployment --deployment-configuration "deploymentCircuitBreaker={enable=true,rollback=true}"'
                }               
            }
           }

      }
            
    }
    
    post{
        always{
            cleanWs()
        }
    }

}